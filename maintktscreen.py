#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 10, 2020 12:25:52 PM IST  platform: Windows NT
import pyaudio
import speech_recognition as s_r
from gtts import gTTS
from playsound import playsound
import os 
import time
import sys
import speak_class
from ttkthemes import ThemedTk, THEMES
import tkinter.font as TkFont
from tkinter import messagebox
import multiprocessing
import threading
from PIL import ImageTk,Image
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import maintktscreen_support
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root ,top 
    root = ThemedTk()
    root.set_theme("kroc")
    maintktscreen_support.set_Tk_var()
    top = Toplevel1(root)
    manager = multiprocessing.Manager
    multiprocessing.Process(target=maintktscreen_support.init,args=(root, top))
    root.mainloop()

w = None
parent_conn, child_conn = multiprocessing.Pipe()
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    maintktscreen_support.set_Tk_var()
    top = Toplevel1 (w)
    
    p = multiprocessing.Process(target=maintktscreen_support.init,args= (w, top, *args,))
    p.start()
    #maintktscreen_support.init(w, top, *args, **kwargs)
    print(parent_conn.recv())
    p.join()
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
class Toplevel1:
    def cloud_connect(self):
        '''Connect the user to clouding interface'''
        messagebox.showinfo("Couldn't connect to cloud!","Cloud Services not available right now. Please try later.")

    def find_nth(self,strings, element, n):                                   #to find the index of nth substring in a string
        start = strings.find(element)
        while start >= 0 and n > 1:
            start = strings.find(element, start+len(element))
            n -= 1
        return start
    def listen_user(self):
        
        lu = s_r.Recognizer()
        with s_r.Microphone() as source:
            
            print("Listening....")
            #playsound('Sounds/ding.mp3')
            lu.adjust_for_ambient_noise(source,duration=.5)
            audio = lu.listen(source,phrase_time_limit=1.2)
            self.lu_text = str
            try:
                self.lu_text = lu.recognize_google(audio,language="en-US")
                print(self.lu_text)
                #flag = 1
                if self.lu_text == "open file" or self.lu_text == "openfile":
                # open_file()
                    pass
                            
                elif self.lu_text == "exit" or self.lu_text == "EXIT":
                    #exit_voice()
                    pass
                            
                elif self.lu_text == "save file as" or self.lu_text == "savefile as":
                    #save_as()
                    pass

                elif self.lu_text == "save":
                    # save()
                    pass
                else:
                    self.Scrolledtext1.configure(state=tk.NORMAL)    
                    self.Scrolledtext1.insert(tk.END," "+ self.lu_text)
                        
                    if 'bold' in self.lu_text:
                        self.Scrolledtext1.configure(state=tk.NORMAL)
                        self.Scrolledtext1.insert(tk.END," "+ self.lu_text)
                                #self.Scrolledtext1.clipboard_append(self.lu_text)
                        word = self.lu_text                                                       #Targetted Word  
                        text, line = self.Scrolledtext1.get("1.0",tk.END), 0                                #text getting text of the widget
                        text = text.split("\n")                                          #splitting and getting list on the newlines
                        for x, i in enumerate(text):                                     #Looping through that list
                            if word in i:                                                #if targetted word is in the xth string i of the list
                                for e in range(0, i.count(word)):
                                    index = self.find_nth(i, word, e+1)                       #Getting the index of the word
                                    start = float(str(x+1)+"."+str(index))               #Making the indices for tkinter
                                    end = float(str(x+1)+"."+str(index+len(word)))       #Making the indices for tkinter
                                    self.Scrolledtext1.focus()                                           #Focusing on the Text widget to make the selection visible
                                    self.Scrolledtext1.tag_add("sel", start, end)
                        self.Scrolledtext1.tag_add("sel", start, end)
                        self.Scrolledtext1.focus_set()
                        self.OnBold_mic(self.lu_text)
                    elif 'delete' or 'back' in self.lu_text:
                        strings_in_text = []
                        strings_in_text  = self.Scrolledtext1.get(1.0,tk.END)
                        strings_in_text.split(" ",1)
                        print(strings_in_text)
                            
                                      

                    elif 'underline' in self.lu_text:
                        self.Scrolledtext1.configure(state=tk.NORMAL)
                        self.Scrolledtext1.insert(tk.END," "+ self.lu_text)
                        #self.Scrolledtext1.clipboard_append(self.lu_text)
                        word = self.lu_text                                                       #Targetted Word  
                        text, line = self.Scrolledtext1.get("1.0",tk.END), 0                                #text getting text of the widget
                        text = text.split("\n")                                          #splitting and getting list on the newlines
                        for x, i in enumerate(text):                                     #Looping through that list
                            if word in i:                                                #if targetted word is in the xth string i of the list
                                for e in range(0, i.count(word)):
                                    index = self.find_nth(i, word, e+1)                       #Getting the index of the word
                                    start = float(str(x+1)+"."+str(index))               #Making the indices for tkinter
                                    end = float(str(x+1)+"."+str(index+len(word)))       #Making the indices for tkinter
                                    #self.Scrolledtext1.focus()                                           #Focusing on the Text widget to make the selection visible
                                    self.Scrolledtext1.tag_add("sel", start, end)
                                    #self.Scrolledtext1.focus_set()
                                    self.OnUnderline_mic(self.lu_text)
                    elif 'strike' in self.lu_text:
                        self.Scrolledtext1.configure(state=tk.NORMAL)
                        self.Scrolledtext1.insert(tk.END," "+ self.lu_text)
                        #self.Scrolledtext1.clipboard_append(self.lu_text)
                        word = self.lu_text                                                       #Targetted Word  
                        text, line = self.Scrolledtext1.get("1.0",tk.END), 0                                #text getting text of the widget
                        text = text.split("\n")                                          #splitting and getting list on the newlines
                        for x, i in enumerate(text):                                     #Looping through that list
                            if word in i:                                                #if targetted word is in the xth string i of the list
                                for e in range(0, i.count(word)):
                                    index = self.find_nth(i, word, e+1)                       #Getting the index of the word
                                    start = float(str(x+1)+"."+str(index))               #Making the indices for tkinter
                                    end = float(str(x+1)+"."+str(index+len(word)))       #Making the indices for tkinter
                                    self.Scrolledtext1.focus()                                           #Focusing on the Text widget to make the selection visible
                                    self.Scrolledtext1.tag_add("sel", start, end)
                                    #self.Scrolledtext1.focus_set()
                                    self.OnStrike_mic(self.lu_text)
                    else:
                        self.Scrolledtext1.configure(state=tk.NORMAL)
                        self.Scrolledtext1.insert(tk.END," "+ self.lu_text)

                        
            except s_r.UnknownValueError:
                print("Google Speech Recognition could not understand audio")
                time.sleep(0.8)
                playsound('Sounds/windows_error.mp3',block=False)
                
                        
            except s_r.RequestError as e:
                    
                    print("Could not request results from Google Speech Recognition service; {0}".format(e))
                    time.sleep(1.8)
                    playsound('Sounds/windows_error.mp3',block=False)
                    
                    
    def OnBold_mic(self,texts):
        '''Toggle the Bold state of the selected text with mic input'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(weight="bold")
        self.Scrolledtext1.tag_configure("bold", font=bold_font)
        current_tags = self.Scrolledtext1.tag_names("sel.first")

        if "bold" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("bold", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("bold", "sel.first", "sel.last")
    def OnUnderline_mic(self,texts):
        '''Toggle the Underline state of the selected text with mic input.'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(underline=True)
        self.Scrolledtext1.tag_configure("underline", font=bold_font)
        current_tags = self.Scrolledtext1.tag_names("sel.first")

        if "bold" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("underline", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("underline", "sel.first", "sel.last")
    def OnStrike_mic(self,texts):
        '''Toggle the Strike state of the selected text with mic input.'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(overstrike=True)
        self.Scrolledtext1.tag_configure("overstrike", font=bold_font)
        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        if "overstrike" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("overstrike", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("overstrike", "sel.first", "sel.last")

    def OnBold(self):
        '''Toggle the bold state of the selected text'''
        
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(weight="bold")
        self.Scrolledtext1.tag_configure("bold", font=bold_font)
        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        try:
            if "bold" in current_tags:
            # first char is bold, so unbold the range
                self.Scrolledtext1.tag_remove("bold", "sel.first", "sel.last")
                
            else:
                # first char is normal, so bold the whole selection
                self.Scrolledtext1.tag_add("bold", "sel.first", "sel.last")
                
                
        except:
            pass
            
    def OnUnderline(self):
        '''Toggle the bold state of the selected text'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(underline=True)
        self.Scrolledtext1.tag_configure("underline", font=bold_font)
        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        if "underline" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("underline", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("underline", "sel.first", "sel.last")
    
    def OnItalics(self):
        '''Toggle the bold state of the selected text'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(slant='italic')
        self.Scrolledtext1.tag_configure("italic", font=bold_font)
        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        if "italic" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("italic", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("italic", "sel.first", "sel.last")
    
    def OnStrike(self):
        '''Toggle the bold state of the selected text'''
        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(overstrike=True)
        self.Scrolledtext1.tag_configure("overstrike", font=bold_font)
        # toggle the bold state based on the first character
        # in the selected range. If bold, unbold it. If not
        # bold, bold it.
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        if "overstrike" in current_tags:
            # first char is bold, so unbold the range
            self.Scrolledtext1.tag_remove("overstrike", "sel.first", "sel.last")
        else:
            # first char is normal, so bold the whole selection
            self.Scrolledtext1.tag_add("overstrike", "sel.first", "sel.last")
    
    def fetch_attributes(self,events):
        '''Fetch the attributes of the selected text'''
        ds = self.Scrolledtext1.cget("font")
        print(ds) 
        self.default_s.set(ds)
        #self.ffont.set(10)

    def change_font(self,t):
        self.i = self.i + 1
        print(self.default_s.get())
        print(self.SBoxfontsize.get())
        print(self.ffont)

        bold_font = TkFont.Font(self.Scrolledtext1, self.Scrolledtext1.cget("font"))
        bold_font.configure(size=self.SBoxfontsize.get())
        bold_font.configure(family=self.ffont)
        self.Scrolledtext1.tag_configure("changefont", font=bold_font)
        current_tags = self.Scrolledtext1.tag_names("sel.first")
        print(current_tags)
        try:
            if "changefont" in current_tags:
            # first char is bold, so unbold the range
                self.Scrolledtext1.tag_remove("changefont", "sel.first", "sel.last")
                #self.Scrolledtext1.configure(font="-size 24")
            else:
                # first char is normal, so bold the whole selection
                self.Scrolledtext1.tag_add("changefont", "sel.first", "sel.last")
                #self.Scrolledtext1.tag_add("bt2", "sel.first", "sel.last")
                #self.Scrolledtext1.configure(font="-size 24")
        except:
            pass
    def settings_userconfig(self):
        settingS_win = tk.Toplevel()
        settingS_win.wm_title("Settings")

        settingS_win.geometry("1260x600")
    def next_page(self,event):
        y = event.y
        top = self.slidery - 20
        bottom = self.slidery + self.sliderh - 20
        coords = self.get_coords()
        if y < top:
            self.up_page(coords)
        if y > bottom:
            self.down_page(coords)

    def up_page(self,coords):
        up = -(coords[1] - coords[0])
        self.Scrolledtext1.yview(tk.SCROLL,-1,"pages")
        self.pos_slider()

    def down_page(self,coords):
        down = coords[1] - coords[0]
        self.Scrolledtext1.yview(tk.SCROLL,1,"pages")
        self.pos_slider()

    def pos_slider(self):
        coords = self.get_coords()
        self.slidery = (coords[0]/coords[2] * 360) + 20
        self.slider.place(y = self.slidery)

    def config_slider(self):
        coords = self.get_coords()
        top = coords[0]
        bottom = coords[1]
        last = coords[2]
        last -= 1
        if bottom-top < last:
            f = int((bottom-top)/last * 360)
        else:
            f = 360
        if f < 10:
            f = 10
        self.sliderh = f
        self.slider.place(height = f,y = self.slidery)

    def get_coords(self):
        root.update()
        top = self.Scrolledtext1.index("@0,0")
        bottom = self.Scrolledtext1.index("@0,%d" %self.Scrolledtext1.winfo_height())
        last = self.Scrolledtext1.index(tk.END)
        t = top.split(".")
        b = bottom.split(".")
        l = last.split(".")
        top = int(t[0])
        bottom = int(b[0])
        last = int(l[0])
        return [top,bottom,last]

    def up_view(self,event):
        self.Scrolledtext1.yview(tk.SCROLL,-2,"units")
        self.pos_slider()

    def down_view(self,event):
        self.Scrolledtext1.yview(tk.SCROLL,2,"units")
        self.pos_slider()

    def get_slider(self,event):
        self.y = event.y_root
        self.config_slider()

    def move_slider(self,event):
        y = event.y_root - self.y
        y += self.slidery
        if y < 20:
            y = 20
        if y > 380 - self.sliderh:
            y = 380 - self.sliderh
        self.slider.place(y = y)
        self.move_text(y)

    def move_text(self,y):
        coords = self.get_coords()
        y1 = 360 - self.sliderh
        if y1 != 0:            
            prop = (coords[1]-coords[0])/coords[2]
            prop1 = 1-prop
            prop2 = (y-20)/prop1
            f = prop2/360 * prop1
            self.Scrolledtext1.yview(tk.MOVETO,f)

    def release_slider(self,event):
        y = event.y_root - self.y + self.slidery
        if y < 20:
            y = 20
        if y > 380 - self.sliderh:
            y = 380 - self.sliderh
        self.slidery = y
        self.slider.place(y = y)
        self.move_text(y)    
        self.config_slider()    
    def onMic(self):
        playsound('Sounds/ding.mp3')
        self.Scrolledtext1.configure(state=tk.DISABLED)
        t1 = threading.Thread(target= self.listen_user, args=() )
        t1.start()
        #t1.join(timeout=2.5)
        if t1.is_alive is False:
            self.Scrolledtext1.configure(state=tk.NORMAL)
        '''child_conn.send(txts)
        child_conn.close()'''
    def onHelp(self):
        
        t2 = threading.Thread(target=speak_class.speak, args=())
        t2.start()
    def hide_toolbar(self,event):
        self.lblFontTools.place_forget()
        self.TSeparator1.place_forget()
        self.lblPageFormatTools.place_forget()
        self.lblSpeechTools.place_forget()
        self.TSeparator4.place_forget()
        self.lblHelpBox.place_forget()
        self.lblFontSize.place_forget()
        self.lblForeColour.place_forget()
        self.SBoxfontsize.place_forget()
        self.entryForeColour.place_forget()
        self.TSeparator3.place_forget()
        self.lblBgColour.place_forget()
        self.entryBgColour.place_forget()
        self.btnStirke.place_forget()
        self.btnUnderline.place_forget()
        self.btnItalics.place_forget()
        self.btnBold.place_forget()
        self.btnHelp.place_forget()
        self.btnMic.place_forget()
        self.lblStyle.place_forget()
        self.CmbxStyle.place_forget()
        self.lblCommands.place_forget()
        self.CmbxCommands.place_forget()
        self.lblTextFormat.place_forget()
        self.radioLeft.place_forget()
        self.radioCenter.place_forget()
        self.radioRight.place_forget()
        self.lblPhraseLimit.place_forget()
        self.lblSeconds.place_forget()
        self.SboxSeconds.place_forget()
        self.SboxPhraseLimit.place_forget()
        self.btnPaste.place_forget()
        self.btnCopy.place_forget()
        self.TSeparator2.place_forget()
        self.lblControl.place_forget()
        self.lblTextmodes.place_forget()
        self.btnTextmodes.place_forget()
        self.Scrolledtext1.place(relx=0.0, rely=0.05, relheight=1
                , relwidth=0.882)
        self.arrow_window.place(relx= 0.0,rely=0.0,relheight=0.048,relwidth=0.9)
        #self.c.place_configure(relx= 0.989,rely=0.060,relwidth=0.15,relheight=.960)
        self.vsb.place(relx=0.8815, rely=0.05,relheight=.8189)
        self.arrow_img.place_forget()
        self.img = ImageTk.PhotoImage(Image.open("images/arrowdown.png"))
        self.arrow_img = tk.Label(self.arrow_window,image = self.img)
        self.arrow_img.image = self.img
        self.arrow_img.configure(background="#485254")
        self.arrow_img.place(relx=.45)
        self.arrow_img.bind('<Button-1>',self.show_toolbox)
        

    def show_toolbox(self,event):
        self.Scrolledtext1.place(relx=0.013, rely=0.203, relheight=0.639
                , relwidth=0.868)
        self.lblFontTools.place(relx=0.208, rely=0.011, height=16, width=122)
        self.TSeparator1.place(relx=-0.004, rely=0.152, relwidth=1.211)
        self.lblPageFormatTools.place(relx=0.524, rely=0.011, height=26
                , width=155)
        self.lblSpeechTools.place(relx=0.511, rely=0.085, height=26, width=132)
        self.TSeparator4.place(relx=0.695, rely=0.002, relheight=0.148)
        self.lblHelpBox.place(relx=0.757, rely=0.011, height=32, width=73)
        self.lblFontSize.place(relx=0.088, rely=0.042, height=26, width=64)
        self.lblForeColour.place(relx=0.29, rely=0.042, height=26, width=81)
        self.SBoxfontsize.place(relx=0.145, rely=0.042, relheight=0.025
                , relwidth=0.117)
        self.entryForeColour.place(relx=0.347, rely=0.042, height=24
                , relwidth=0.091)
        self.TSeparator3.place(relx=0.444, rely=0.004, relheight=0.148)
        self.lblBgColour.place(relx=0.284, rely=0.074, height=26, width=90)
        self.entryBgColour.place(relx=0.347, rely=0.074, height=24
                , relwidth=0.091)
        self.btnStirke.place(relx=0.41, rely=0.116, height=33, width=46)
        self.btnUnderline.place(relx=0.328, rely=0.116, height=33, width=46)
        self.btnItalics.place(relx=0.366, rely=0.116, height=33, width=46)
        self.btnBold.place(relx=0.284, rely=0.116, height=33, width=46)
        self.btnHelp.place(relx=0.7, rely=0.105, height=43, width=124)
        self.btnMic.place(relx=0.8, rely=0.105, height=43, width=124)
        self.lblStyle.place(relx=0.088, rely=0.074, height=26, width=58)
        self.CmbxStyle.place(relx=0.145, rely=0.074, relheight=0.028
                , relwidth=0.118)
        self.lblCommands.place(relx=0.7, rely=0.053, height=36, width=111)
        self.CmbxCommands.place(relx=0.77, rely=0.063, relheight=0.028
                , relwidth=0.105)
        self.lblTextFormat.place(relx=0.448, rely=0.053, height=26, width=85)
        self.radioLeft.place(relx=0.524, rely=0.053, relheight=0.033
                , relwidth=0.034)
        self.radioCenter.place(relx=0.568, rely=0.053, relheight=0.033
                , relwidth=0.045)
        self.radioRight.place(relx=0.625, rely=0.053, relheight=0.033
                , relwidth=0.04)
        self.lblPhraseLimit.place(relx=0.454, rely=0.106, height=36, width=106)
        self.lblSeconds.place(relx=0.587, rely=0.116, height=26, width=72)
        self.SboxSeconds.place(relx=0.644, rely=0.116, relheight=0.025
                , relwidth=0.048)
        self.SboxPhraseLimit.place(relx=0.53, rely=0.116, relheight=0.025
                , relwidth=0.048)
        self.btnPaste.place(relx=0.003, rely=0.042, height=43, width=116)
        self.btnCopy.place(relx=0.003, rely=0.104, height=43, width=116)
        self.TSeparator2.place(relx=0.085, rely=0.004, relheight=0.148)
        self.lblControl.place(relx=0.006, rely=0.011, height=26, width=115)
        self.lblTextmodes.place(relx=0.088, rely=0.116, height=26, width=83)
        self.btnTextmodes.place(relx=0.145, rely=0.116, relheight=0.028
                , relwidth=0.118)
        self.vsb.place(relx=0.8815, rely=0.203,relheight=.6391)
        self.arrow_window.place(relx= 0.0,rely=0.154,relheight=0.048,relwidth=0.9)
        self.arrow_img.place_forget()
        self.img = ImageTk.PhotoImage(Image.open("images/arrowup.png"))
        self.arrow_img = tk.Label(self.arrow_window,image = self.img)
        self.arrow_img.image = self.img
        self.arrow_img.configure(background="#485254")
        self.arrow_img.place(relx=.45)
        self.arrow_img.bind('<Button-1>',self.hide_toolbar)
 

        

    def __init__(self, top):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win64":
            self.style.theme_use('dark')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="Arial")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        
        self.i = 0
        self.default_font ={
    "default": TkFont.Font(family="Helvetica", size=12),
    "bt2": TkFont.Font(family="Helvetica", size=18),
    "btArial":TkFont.Font(family="Arial", size=12)}
        top.geometry("1413x821+119+184")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        #top.resizable(1, 1)
        top.title("Speakintosh")
        top.configure(background="#1b262c")
        top.configure(highlightbackground="#1b262c")
        top.configure(highlightcolor="black")
        
        self.backcolor_widget  = "#364144"
        self.forecolor_widget = '#fe3523'
        
        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.151, relwidth=1.122)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background=self.backcolor_widget)
        #self.Frame1.configure(highlightbackground="#d9d9d9")
        #self.Frame1.configure(highlightcolor="black")

        self.menubar = tk.Menu(self.Frame1)
        top.configure(menu = self.menubar)
        self.file_dropdown = tk.Menu(self.menubar, tearoff=0)
        self.menubar.configure(background="#c4c4c4")
        self.file_dropdown.add_command(label="New File")
        self.file_dropdown.add_command(label="Open File")
        self.file_dropdown.add_command(label="Save")
        self.file_dropdown.add_command(label="Save As")
        self.file_dropdown.add_separator()
        self.file_dropdown.add_command(label="Close")
        self.menubar.add_cascade(label="File",menu=self.file_dropdown)
        self.menubar.add_cascade(label="Edit")
        self.menubar.add_cascade(label="View")
        self.menubar.add_cascade(label="Connect to Cloud",command=self.cloud_connect)
        self.menubar.add_cascade(label="Settings",command=self.settings_userconfig)
        self.menubar.add_cascade(label="Help")
        
        self.arrow_window  = tk.Frame(self.Frame1)
        self.arrow_window.bind(self.hide_toolbar)
        self.arrow_window.place(relx= 0.0,rely=0.154,relheight=0.048,relwidth=0.9)
        self.arrow_window.configure(background="#485254")
        
        
        '''self.img = ImageTk.PhotoImage(Image.open("arrowup.png"))         
        self.arrow_img = tk.Label(self.arrow_window,image = self.img)
        self.arrow_img.image = self.img
        self.arrow_img.configure(background="#485254")
        self.arrow_img.place(relx=.45)
        self.arrow_img.bind('<Button-1>',self.hide_toolbar)
'''
        self.Scrolledtext1 = tk.Text(self.Frame1)
        '''self.c = tk.Canvas(root)
        self.c.place(relx= 0.987,rely=0.236,relwidth=0.10,relheight=0.732)
        
        self.trough = tk.Frame(self.c)
        self.slider = tk.Label(self.c,bg = "#364144")
        self.slidery = 20
        self.sliderh = 300
        self.trough.place(relx= 0,rely = 0,relwidth = 0.05,height=1.11)
        self.slider.place(relx = 0,rely =0,relwidth = .2,relheight=.02)
        self.up = tk.Label(self.c,bg = "#a6a6a6")
        self.down = tk.Label(self.c,bg = "#a6a6a6")
        self.up.place(relx = 0,rely = 0,relwidth = .2,relheight = .04)
        self.down.place(relx = 0,rely = 0.95,relwidth = .2,relheight = .05)
        self.up.bind("<Button-1>",self.up_view)
        self.down.bind("<Button-1>",self.down_view)
        self.slider.bind("<Button-1>",self.get_slider)
        self.slider.bind("<B1-Motion>",self.move_slider)
        self.slider.bind("<ButtonRelease-1>",self.release_slider)
        self.trough.bind("<Button-1>",self.next_page)
        self.config_slider()'''
        
        self.vsb = ttk.Scrollbar(self.Frame1, orient="vertical", command=self.Scrolledtext1.yview)
        self.Scrolledtext1.configure(yscrollcommand=self.vsb.set)
        self.vsb.place(relx=0.8815, rely=0.203,relheight=.6391)

        self.Scrolledtext1.place(relx=0.013, rely=0.203, relheight=0.639
                , relwidth=0.868)
        self.Scrolledtext1.configure(background=self.backcolor_widget)
        self.Scrolledtext1.configure(font="CourierNew")
        self.Scrolledtext1.configure(foreground=self.forecolor_widget)
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="word")
        self.Scrolledtext1.bind('<ButtonRelease-1>',self.fetch_attributes)    
        self.ffont = tk.IntVar() 
        self.ffont = 14
        
        self.lblFontTools = tk.Label(self.Frame1)
        self.lblFontTools.place(relx=0.208, rely=0.011, height=16, width=122)
        self.lblFontTools.configure(activebackground="#202020")
        self.lblFontTools.configure(activeforeground="white")
        self.lblFontTools.configure(activeforeground="black")
        self.lblFontTools.configure(background=self.backcolor_widget )
        self.lblFontTools.configure(font=self.default_font["default"])
        self.lblFontTools.configure(foreground=self.forecolor_widget )
        self.lblFontTools.configure(highlightbackground="#f0f0f0f0f0f0")
        self.lblFontTools.configure(highlightcolor="black")
        self.lblFontTools.configure(text='''FONT TOOLS''')
        self.lblFontTools.configure(textvariable=maintktscreen_support.lblfonrttools)

        self.TSeparator1 = ttk.Separator(self.Frame1)
        self.TSeparator1.place(relx=-0.004, rely=0.152, relwidth=1.211)

        self.lblPageFormatTools = tk.Label(self.Frame1)
        self.lblPageFormatTools.place(relx=0.524, rely=0.011, height=26
                , width=155)
        self.lblPageFormatTools.configure(activebackground="#f9f9f9")
        self.lblPageFormatTools.configure(activeforeground="black")
        self.lblPageFormatTools.configure(background=self.backcolor_widget)
        self.lblPageFormatTools.configure(disabledforeground="#a3a3a3")
        self.lblPageFormatTools.configure(font="-family {Sitka Heading} -size 11")
        self.lblPageFormatTools.configure(foreground=self.forecolor_widget )
        self.lblPageFormatTools.configure(highlightbackground="#d9d9d9")
        self.lblPageFormatTools.configure(highlightcolor="black")
        self.lblPageFormatTools.configure(text='''Page format tools''')
        self.lblPageFormatTools.configure(textvariable=maintktscreen_support.lblpagetools)

        self.lblSpeechTools = tk.Label(self.Frame1)
        self.lblSpeechTools.place(relx=0.511, rely=0.085, height=26, width=132)
        self.lblSpeechTools.configure(activebackground="#f9f9f9")
        self.lblSpeechTools.configure(activeforeground="black")
        self.lblSpeechTools.configure(background=self.backcolor_widget)
        self.lblSpeechTools.configure(disabledforeground="#a3a3a3")
        self.lblSpeechTools.configure(foreground=self.forecolor_widget )
        self.lblSpeechTools.configure(highlightbackground="#d9d9d9")
        self.lblSpeechTools.configure(highlightcolor="black")
        self.lblSpeechTools.configure(text='''Speech Tools''')

        self.TSeparator4 = ttk.Separator(self.Frame1)
        self.TSeparator4.place(relx=0.695, rely=0.002, relheight=0.148)
        self.TSeparator4.configure(orient="vertical")

        self.lblHelpBox = tk.Label(self.Frame1)
        self.lblHelpBox.place(relx=0.757, rely=0.011, height=32, width=73)
        self.lblHelpBox.configure(activebackground="#f9f9f9")
        self.lblHelpBox.configure(activeforeground="black")
        self.lblHelpBox.configure(background=self.backcolor_widget)
        self.lblHelpBox.configure(disabledforeground="#a3a3a3")
        self.lblHelpBox.configure(font="-family {Sitka Heading} -size 11")
        self.lblHelpBox.configure(foreground=self.forecolor_widget)
        self.lblHelpBox.configure(highlightbackground="#d9d9d9")
        self.lblHelpBox.configure(highlightcolor="black")
        self.lblHelpBox.configure(text='''Help box''')

        
        

        self.lblFontSize = tk.Label(self.Frame1)
        self.lblFontSize.place(relx=0.088, rely=0.042, height=26, width=64)
        self.lblFontSize.configure(activebackground="#f9f9f9")
        self.lblFontSize.configure(activeforeground="black")
        self.lblFontSize.configure(background=self.backcolor_widget)
        self.lblFontSize.configure(disabledforeground="#a3a3a3")
        self.lblFontSize.configure(foreground=self.forecolor_widget)
        self.lblFontSize.configure(highlightbackground="#d9d9d9")
        self.lblFontSize.configure(highlightcolor="black")
        self.lblFontSize.configure(text='''Font size''')

        self.lblForeColour = tk.Label(self.Frame1)
        self.lblForeColour.place(relx=0.29, rely=0.042, height=26, width=81)
        self.lblForeColour.configure(activebackground="#f9f9f9")
        self.lblForeColour.configure(activeforeground="black")
        self.lblForeColour.configure(background=self.backcolor_widget)
        self.lblForeColour.configure(disabledforeground="#a3a3a3")
        self.lblForeColour.configure(foreground=self.forecolor_widget)
        self.lblForeColour.configure(highlightbackground="#d9d9d9")
        self.lblForeColour.configure(highlightcolor="black")
        self.lblForeColour.configure(text='''Forecolour''')

        self.SBoxfontsize = ttk.Combobox(self.Frame1,textvariable=self.ffont)
        self.SBoxfontsize.place(relx=0.145, rely=0.042, relheight=0.025
                , relwidth=0.117)
        #self.SBoxfontsize.bind('<Motion>',self.change_font)
        #self.SBoxfontsize.configure(textvariable=maintktscreen_support.spinbox)
        
        self.value_list = [14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]
        self.SBoxfontsize.configure(values=self.value_list)

        self.entryForeColour = tk.Entry(self.Frame1)
        self.entryForeColour.place(relx=0.347, rely=0.042, height=24
                , relwidth=0.091)
        self.entryForeColour.configure(background="white")
        #self.entryForeColour.configure(disabledforeground="#a3a3a3")
        self.entryForeColour.configure(font="TkFixedFont")
        self.entryForeColour.configure(foreground=self.forecolor_widget)
        self.entryForeColour.configure(highlightbackground="#d9d9d9")
        self.entryForeColour.configure(highlightcolor="black")
        self.entryForeColour.configure(insertbackground=self.forecolor_widget)
        self.entryForeColour.configure(selectbackground="#c4c4c4")
        self.entryForeColour.configure(selectforeground="black")

        self.TSeparator3 = ttk.Separator(self.Frame1)
        self.TSeparator3.place(relx=0.444, rely=0.004, relheight=0.148)
        self.TSeparator3.configure(orient="vertical")

        self.lblBgColour = ttk.Label(self.Frame1)
        self.lblBgColour.place(relx=0.284, rely=0.074, height=26, width=90)
        self.lblBgColour.configure(background=self.backcolor_widget)
        self.lblBgColour.configure(foreground=self.forecolor_widget)
        self.lblBgColour.configure(text='''Bgcolour''')

        self.entryBgColour = tk.Entry(self.Frame1)
        self.entryBgColour.place(relx=0.347, rely=0.074, height=24
                , relwidth=0.091)
        self.entryBgColour.configure(background="white")
        self.entryBgColour.configure(disabledforeground="#a3a3a3")
        self.entryBgColour.configure(font="TkFixedFont")
        self.entryBgColour.configure(foreground="#000000")
        self.entryBgColour.configure(highlightbackground="#d9d9d9")
        self.entryBgColour.configure(highlightcolor="black")
        self.entryBgColour.configure(insertbackground="black")
        self.entryBgColour.configure(selectbackground="#c4c4c4")
        self.entryBgColour.configure(selectforeground="black")

        self.btnStirke = tk.Button(self.Frame1,command =self.OnStrike)
        self.btnStirke.place(relx=0.41, rely=0.116, height=33, width=46)
        self.btnStirke.configure(activebackground="#ececec")
        self.btnStirke.configure(activeforeground="#000000")
        self.btnStirke.configure(background=self.backcolor_widget)
        self.btnStirke.configure(disabledforeground="#a3a3a3")
        self.btnStirke.configure(font="-family {Segoe UI Black} -size 9 -weight bold -overstrike 1")
        self.btnStirke.configure(foreground=self.forecolor_widget)
        self.btnStirke.configure(highlightbackground="#d9d9d9")
        self.btnStirke.configure(highlightcolor="black")
        self.btnStirke.configure(pady="0")
        self.btnStirke.configure(relief="groove")
        self.btnStirke.configure(text='''S''')

        self.btnUnderline = tk.Button(self.Frame1,command=self.OnUnderline)
        self.btnUnderline.place(relx=0.328, rely=0.116, height=33, width=46)
        self.btnUnderline.configure(activebackground="#ececec")
        self.btnUnderline.configure(activeforeground="#000000")
        self.btnUnderline.configure(background=self.backcolor_widget)
        self.btnUnderline.configure(disabledforeground="#a3a3a3")
        self.btnUnderline.configure(font="-family {Segoe UI Black} -size 9 -weight bold -underline 1")
        self.btnUnderline.configure(foreground=self.forecolor_widget )
        self.btnUnderline.configure(highlightbackground="#d9d9d9")
        self.btnUnderline.configure(highlightcolor="black")
        self.btnUnderline.configure(pady="0")
        self.btnUnderline.configure(relief="groove")
        self.btnUnderline.configure(text='''U''')
        self.btnUnderline.configure(underline="1")

        self.btnItalics = tk.Button(self.Frame1,command=self.OnItalics)
        self.btnItalics.place(relx=0.366, rely=0.116, height=33, width=46)
        self.btnItalics.configure(activebackground="#ececec")
        self.btnItalics.configure(activeforeground="#000000")
        self.btnItalics.configure(background=self.backcolor_widget)
        self.btnItalics.configure(disabledforeground="#a3a3a3")
        self.btnItalics.configure(font="-family {Segoe UI Black} -size 9 -weight bold -slant italic")
        self.btnItalics.configure(foreground=self.forecolor_widget)
        self.btnItalics.configure(highlightbackground="#d9d9d9")
        self.btnItalics.configure(highlightcolor="black")
        self.btnItalics.configure(pady="0")
        self.btnItalics.configure(relief="groove")
        self.btnItalics.configure(text='''I''')

        self.btnBold = tk.Button(self.Frame1,command=self.OnBold)
        self.btnBold.place(relx=0.284, rely=0.116, height=33, width=46)
        self.btnBold.configure(activebackground="#010101")
        self.btnBold.configure(activeforeground="#f0ece2")
        self.btnBold.configure(background=self.backcolor_widget)
        self.btnBold.configure(disabledforeground="#a3a3a3")
        self.btnBold.configure(font="-family {Segoe UI Black} -size 14 -weight bold")
        self.btnBold.configure(foreground=self.forecolor_widget )
        self.btnBold.configure(highlightbackground="#d9d9d9")
        self.btnBold.configure(highlightcolor="black")
        self.btnBold.configure(pady="0")
        self.btnBold.configure(relief="groove")
        self.btnBold.configure(text='B')

        self.btnHelp = tk.Button(self.Frame1,command=self.onHelp)
        self.btnHelp.place(relx=0.7, rely=0.105, height=43, width=124)
        self.btnHelp.configure(activebackground="#ececec")
        self.btnHelp.configure(activeforeground="#000000")
        self.btnHelp.configure(background=self.backcolor_widget)
        self.btnHelp.configure(disabledforeground="#a3a3a3")
        self.btnHelp.configure(foreground=self.forecolor_widget)
        self.btnHelp.configure(highlightbackground="#d9d9d9")
        self.btnHelp.configure(highlightcolor="black")
        self.btnHelp.configure(pady="0")
        self.btnHelp.configure(relief="groove")
        self.btnHelp.configure(text='''Help''')

        self.btnMic = tk.Button(self.Frame1,command= self.onMic)
        self.btnMic.place(relx=0.8, rely=0.105, height=43, width=124)
        self.btnMic.configure(activebackground="#ececec")
        self.btnMic.configure(activeforeground="#000000")
        self.btnMic.configure(background=self.backcolor_widget)
        self.btnMic.configure(disabledforeground="#a3a3a3")
        self.btnMic.configure(foreground=self.forecolor_widget)
        self.btnMic.configure(highlightbackground="#d9d9d9")
        self.btnMic.configure(highlightcolor="black")
        self.btnMic.configure(pady="0")
        self.btnMic.configure(relief="groove")
        self.btnMic.configure(text='''Mic''')

        self.lblStyle = tk.Label(self.Frame1)
        self.lblStyle.place(relx=0.088, rely=0.074, height=26, width=58)
        self.lblStyle.configure(activebackground="#f9f9f9")
        self.lblStyle.configure(activeforeground="black")
        self.lblStyle.configure(background=self.backcolor_widget)
        self.lblStyle.configure(disabledforeground="#a3a3a3")
        self.lblStyle.configure(foreground=self.forecolor_widget)
        self.lblStyle.configure(highlightbackground="#d9d9d9")
        self.lblStyle.configure(highlightcolor="black")
        self.lblStyle.configure(text='''Style''')
        
        self.default_s = tk.StringVar() 
        self.CmbxStyle = ttk.Combobox(self.Frame1)
        self.CmbxStyle.place(relx=0.145, rely=0.074, relheight=0.028
                , relwidth=0.118)
        self.CmbxStyle.configure(textvariable=self.default_s)
        self.CmbxStyle.configure(takefocus="")
        #self.CmbxStyle.bind('<Button>',self.change_font)
        self.CmbxStyle.configure(values=['Helvatica','Times New Roman','Helvatica','Helvatica','Helvatica'])

        self.lblCommands = tk.Label(self.Frame1)
        self.lblCommands.place(relx=0.7, rely=0.053, height=36, width=111)
        self.lblCommands.configure(activebackground="#f9f9f9")
        self.lblCommands.configure(activeforeground="black")
        self.lblCommands.configure(background=self.backcolor_widget)
        self.lblCommands.configure(disabledforeground="#a3a3a3")
        self.lblCommands.configure(foreground=self.forecolor_widget)
        self.lblCommands.configure(highlightbackground="#d9d9d9")
        self.lblCommands.configure(highlightcolor="black")
        self.lblCommands.configure(text='''Commands''')

        self.CmbxCommands = ttk.Combobox(self.Frame1)
        self.CmbxCommands.place(relx=0.77, rely=0.063, relheight=0.028
                , relwidth=0.105)
        self.CmbxCommands.configure(textvariable=maintktscreen_support.combobox)
        self.CmbxCommands.configure(takefocus="")
        

        self.lblTextFormat = tk.Label(self.Frame1)
        self.lblTextFormat.place(relx=0.448, rely=0.053, height=26, width=85)
        self.lblTextFormat.configure(activebackground="#f9f9f9")
        self.lblTextFormat.configure(activeforeground="black")
        self.lblTextFormat.configure(background=self.backcolor_widget)
        self.lblTextFormat.configure(disabledforeground="#a3a3a3")
        self.lblTextFormat.configure(foreground=self.forecolor_widget)
        self.lblTextFormat.configure(highlightbackground="#d9d9d9")
        self.lblTextFormat.configure(highlightcolor="black")
        self.lblTextFormat.configure(text='''Text Format''')

        self.radioLeft = tk.Radiobutton(self.Frame1)
        self.radioLeft.place(relx=0.524, rely=0.053, relheight=0.033
                , relwidth=0.034)
        self.radioLeft.configure(activebackground="#ececec")
        self.radioLeft.configure(activeforeground="#000000")
        self.radioLeft.configure(background=self.backcolor_widget)
        self.radioLeft.configure(disabledforeground="#a3a3a3")
        self.radioLeft.configure(foreground=self.forecolor_widget)
        self.radioLeft.configure(highlightbackground="#d9d9d9")
        self.radioLeft.configure(highlightcolor="black")
        self.radioLeft.configure(justify='left')
        self.radioLeft.configure(text='''Left''')
        self.radioLeft.configure(variable=maintktscreen_support.selectedButton)

        self.radioCenter = tk.Radiobutton(self.Frame1)
        self.radioCenter.place(relx=0.568, rely=0.053, relheight=0.033
                , relwidth=0.045)
        self.radioCenter.configure(activebackground="#ececec")
        self.radioCenter.configure(activeforeground="#000000")
        self.radioCenter.configure(background=self.backcolor_widget)
        self.radioCenter.configure(disabledforeground="#a3a3a3")
        self.radioCenter.configure(foreground=self.forecolor_widget)
        self.radioCenter.configure(highlightbackground="#d9d9d9")
        self.radioCenter.configure(highlightcolor="black")
        self.radioCenter.configure(justify='left')
        self.radioCenter.configure(text='''Center''')
        self.radioCenter.configure(variable=maintktscreen_support.selectedButton)

        self.radioRight = tk.Radiobutton(self.Frame1)
        self.radioRight.place(relx=0.625, rely=0.053, relheight=0.033
                , relwidth=0.04)
        self.radioRight.configure(activebackground="#ececec")
        self.radioRight.configure(activeforeground="#000000")
        self.radioRight.configure(background=self.backcolor_widget)
        self.radioRight.configure(disabledforeground="#a3a3a3")
        self.radioRight.configure(foreground=self.forecolor_widget)
        self.radioRight.configure(highlightbackground="#d9d9d9")
        self.radioRight.configure(highlightcolor="black")
        self.radioRight.configure(justify='left')
        self.radioRight.configure(text='''Right''')
        self.radioRight.configure(variable=maintktscreen_support.selectedButton)

        self.lblPhraseLimit = tk.Label(self.Frame1)
        self.lblPhraseLimit.place(relx=0.454, rely=0.106, height=36, width=106)
        self.lblPhraseLimit.configure(activebackground="#f9f9f9")
        self.lblPhraseLimit.configure(activeforeground="black")
        self.lblPhraseLimit.configure(background=self.backcolor_widget)
        self.lblPhraseLimit.configure(disabledforeground="#a3a3a3")
        self.lblPhraseLimit.configure(font="-family {Sitka Subheading} -size 11")
        self.lblPhraseLimit.configure(foreground=self.forecolor_widget)
        self.lblPhraseLimit.configure(highlightbackground="#d9d9d9")
        self.lblPhraseLimit.configure(highlightcolor="black")
        self.lblPhraseLimit.configure(text='''Phrase Limit''')

        self.lblSeconds = tk.Label(self.Frame1)
        self.lblSeconds.place(relx=0.587, rely=0.116, height=26, width=72)
        self.lblSeconds.configure(activebackground="#f9f9f9")
        self.lblSeconds.configure(activeforeground="black")
        self.lblSeconds.configure(background=self.backcolor_widget)
        self.lblSeconds.configure(disabledforeground="#a3a3a3")
        self.lblSeconds.configure(font="-family {Sitka Subheading} -size 11")
        self.lblSeconds.configure(foreground=self.forecolor_widget)
        self.lblSeconds.configure(highlightbackground="#d9d9d9")
        self.lblSeconds.configure(highlightcolor="black")
        self.lblSeconds.configure(text='''Seconds''')

        self.SboxSeconds = tk.Spinbox(self.Frame1, from_=1.0, to=100.0)
        self.SboxSeconds.place(relx=0.644, rely=0.116, relheight=0.025
                , relwidth=0.048)
        self.SboxSeconds.configure(activebackground="#f9f9f9")
        self.SboxSeconds.configure(background=self.backcolor_widget)
        self.SboxSeconds.configure(buttonbackground="#d9d9d9")
        self.SboxSeconds.configure(disabledforeground="#a3a3a3")
        self.SboxSeconds.configure(font="TkDefaultFont")
        self.SboxSeconds.configure(foreground=self.forecolor_widget)
        self.SboxSeconds.configure(highlightbackground="black")
        self.SboxSeconds.configure(highlightcolor="black")
        self.SboxSeconds.configure(insertbackground="black")
        self.SboxSeconds.configure(relief="groove")
        self.SboxSeconds.configure(selectbackground="#c4c4c4")
        self.SboxSeconds.configure(selectforeground="black")
        self.SboxSeconds.configure(textvariable=maintktscreen_support.spinbox)

        self.SboxPhraseLimit = tk.Spinbox(self.Frame1, from_=1.0, to=100.0)
        self.SboxPhraseLimit.place(relx=0.53, rely=0.116, relheight=0.025
                , relwidth=0.048)
        self.SboxPhraseLimit.configure(activebackground="#f9f9f9")
        self.SboxPhraseLimit.configure(background=self.backcolor_widget)
        self.SboxPhraseLimit.configure(buttonbackground="#d9d9d9")
        self.SboxPhraseLimit.configure(disabledforeground="#a3a3a3")
        self.SboxPhraseLimit.configure(font="TkDefaultFont")
        self.SboxPhraseLimit.configure(foreground=self.forecolor_widget)
        self.SboxPhraseLimit.configure(highlightbackground="black")
        self.SboxPhraseLimit.configure(highlightcolor="black")
        self.SboxPhraseLimit.configure(insertbackground="black")
        self.SboxPhraseLimit.configure(relief="groove")
        self.SboxPhraseLimit.configure(selectbackground="#c4c4c4")
        self.SboxPhraseLimit.configure(selectforeground="black")
        self.SboxPhraseLimit.configure(textvariable=maintktscreen_support.spinbox)

        self.btnPaste = tk.Button(self.Frame1)
        self.btnPaste.place(relx=0.003, rely=0.042, height=43, width=116)
        self.btnPaste.configure(activebackground="#ececec")
        self.btnPaste.configure(activeforeground="#000000")
        self.btnPaste.configure(background=self.backcolor_widget)
        self.btnPaste.configure(disabledforeground="#a3a3a3")
        self.btnPaste.configure(foreground=self.forecolor_widget)
        self.btnPaste.configure(highlightbackground="#d9d9d9")
        self.btnPaste.configure(highlightcolor="black")
        self.btnPaste.configure(pady="0")
        self.btnPaste.configure(text='''Paste''')

        self.btnCopy = tk.Button(self.Frame1)
        self.btnCopy.place(relx=0.003, rely=0.104, height=43, width=116)
        self.btnCopy.configure(activebackground="#ececec")
        self.btnCopy.configure(activeforeground="#000000")
        self.btnCopy.configure(background=self.backcolor_widget)
        self.btnCopy.configure(disabledforeground="#a3a3a3")
        self.btnCopy.configure(foreground=self.forecolor_widget)
        self.btnCopy.configure(highlightbackground="#d9d9d9")
        self.btnCopy.configure(highlightcolor="black")
        self.btnCopy.configure(pady="0")
        self.btnCopy.configure(text='''Copy''')

        self.TSeparator2 = ttk.Separator(self.Frame1)
        self.TSeparator2.place(relx=0.085, rely=0.004, relheight=0.148)
        self.TSeparator2.configure(orient="vertical")

        self.lblControl = tk.Label(self.Frame1)
        self.lblControl.place(relx=0.006, rely=0.011, height=26, width=115)
        self.lblControl.configure(background=self.backcolor_widget)
        self.lblControl.configure(disabledforeground="#a3a3a3")
        self.lblControl.configure(foreground=self.forecolor_widget)
        self.lblControl.configure(text='''Control''')

        self.lblTextmodes = tk.Label(self.Frame1)
        self.lblTextmodes.place(relx=0.088, rely=0.116, height=26, width=83)
        self.lblTextmodes.configure(background=self.backcolor_widget)
        self.lblTextmodes.configure(disabledforeground="#a3a3a3")
        self.lblTextmodes.configure(foreground=self.forecolor_widget)
        self.lblTextmodes.configure(text='''Text Modes''')
        
        self.btnTextmodes = tk.Button(self.Frame1,text="Set")
        self.btnTextmodes.place(relx=0.145, rely=0.116, relheight=0.028
                , relwidth=0.118)
        self.btnTextmodes.configure(background=self.backcolor_widget)
        self.btnTextmodes.configure(foreground=self.forecolor_widget)
        self.btnTextmodes.bind('<Button-1>',self.change_font)
        """self.TCombobox1 = ttk.Combobox(self.Frame1)
        self.TCombobox1.place(relx=0.145, rely=0.116, relheight=0.028
                , relwidth=0.118)
        self.TCombobox1.configure(textvariable=maintktscreen_support.combobox)
        self.TCombobox1.configure(takefocus="")
        """
    

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
            hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        except:
            pass
        #hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
            self.configure(xscrollcommand=self._autoscroll(hsb))
        except:
            pass
        #self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





